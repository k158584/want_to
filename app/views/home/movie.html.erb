<div class="container" style="padding-top: 50px;">
    <div class="row">
        <div class="col-lg-6 centered">
            <script type="text/javascript" src=<%= "http://ext.nicovideo.jp/thumb_watch/"+@id %>></script><noscript><a href= <%="http://www.nicovideo.jp/watch/"+ @id %>>nicovideo</a></noscript>
        </div>
        <div class="col-lg-6 centered">
            <div id="chart"></div>
            <script type="text/javascript">
            var svgWidth = 520; // SVG領域の横幅
            var svgHeight = 360;    // SVG領域の縦幅
            var margin = {top: 20, right: 40, bottom: 20, left: 40};
            var chart_width = svgWidth - margin.left - margin.right;
            var chart_height = svgHeight - margin.top - margin.bottom;

            var time_watch = [
            <% @time_watch.each do |time| %>
                <%= time %>,
            <% end %>
            ]; // ブロック毎の動画開始位置

            var block_com_num = [
            <% @block_com_num.each do |com_num| %>
                <%= com_num %>,
            <% end %>
            ]; // ブロック毎のコメント数

            var comment_max = Math.max.apply(null, block_com_num); // コメントの最大値
            var color = d3.scale.category10();  // あらかじめ用意されている色を使う

            var yScale = (function (height, num_max) {
                         if (height < num_max) {
                            magnification = height/num_max;
                         }
                         else {
                            magnification = 1;
                         }
                         return magnification;
                         }(chart_height - 10, comment_max)); // グラフの高さの倍率

            var svg = d3.select("#chart").append("svg")
                .attr("width", svgWidth)
                .attr("height", svgHeight)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            svg.selectAll("rect")   // 四角形を対象にする
                .data(block_com_num)  // データを読み込む
                .enter()
                .append("rect") // 四角形を生成する
                .attr("x", function(d, i){  // X座標を計算
                    return i * chart_width / <%= @m_division %> ;
                })
                .attr("y", function(d){ // Y座標を計算
                    return chart_height - d * yScale;
                })
                .attr("width", chart_width / <%= @m_division %>)  // 四角形の横幅
                .attr("height", function(d){    // 四角形の高さ
                    return d * yScale;
                })
                .attr("fill", function(d,i){    // 色を指定する
                    return color(i);    // 色を返す
                      })
                .on("click", function(d,i){
                    var player = document.getElementById('external_nico_0');
                    try {
                        player.ext_setPlayheadTime(time_watch[i]);
                    } catch (e) {
                        alert("再生ボタンを押してください。");
                    }
                    
                });
            var xAxis = d3.svg.axis()
                          .scale(d3.scale.linear().domain([0, time_watch[<%= @m_division %> - 1]]).range([0, chart_width]))
                          .orient("bottom")
                          .tickSize(6, -chart_height)
                          .tickFormat(function(d) { return d + "秒"; });
            var yAxis = d3.svg.axis()
                          .ticks(5)
                          .scale(d3.scale.linear().domain([0, comment_max]).range([chart_height, 0]))
                          .orient("left")
                          .tickSize(6, -chart_width);

            svg.append("g")
               .attr("class", "x axis")
               .attr("transform", "translate(0, " + chart_height + ")")
               .call(xAxis);

            svg.append("g")
               .attr("class", "y axis")
               .call(yAxis)
               .append("text")
               .attr("y", -10)
               .attr("x", 10)
               .text("盛り上がり")


            </script>
        </div>
    </div>
    <div class="row mt centered">
        <%= form_tag(controller: "home", action: "search", method: "post") do %>
            <div class="col-lg-7 col-lg-offset-1 mt">
                <%= text_field_tag(:q, @q, class: "form-control", placeholder: "sm* または keyword") %>
            </div>
            <div class="col-lg-3 mt">
                <%= submit_tag("再生", class: "btn btn-theme btn-lg") %>
            </div>
        <%end%>
    </div>
</div>


<% if Rails.env.development? %>
    <b>分割数 : </b>
    <%= @m_division %>
    <br>

    <b>ブロックごとのコメント数 :</b>
    <% @block_com_num.each do |com_num| %>
        <%= com_num %>
    <% end %>

    <br>
    <b>ブロックごとの動画開始位置 :</b>
    <% @video_time_range.each do |time_range| %>
        <%= time_range %>
    <% end %>
<% end %>
