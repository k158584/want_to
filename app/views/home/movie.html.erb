<style type="text/css">
span#tooltip{
  position: absolute;
  z-index: 10;
  visibility: hidden;
  padding: 0px 0px;
  border: 3px solid #000;
  border-radius: 1px;
  background-color: #333;
  color: #fff;
  font-size: 13px;
  opacity: 1;
}
</style>
<span id="tooltip"></span>
<script src="http://code.jquery.com/jquery-latest.js"></script>

<div class="container" style="padding-top: 50px;">
    <div class="row">
        <div class="col-lg-6 centered">
            <script type="text/javascript" src=<%= "http://ext.nicovideo.jp/thumb_watch/"+@id %>></script><noscript><a href= <%="http://www.nicovideo.jp/watch/"+ @id %>>nicovideo</a></noscript>
        </div>
        <div class="col-lg-6 centered">
            <div id="chart"></div>
            <script type="text/javascript">
            var svgWidth = 520; // SVG領域の横幅
            var svgHeight = 360;    // SVG領域の縦幅
            var margin = {top: 20, right: 40, bottom: 40, left: 50};
            var chart_width = svgWidth - margin.left - margin.right;
            var chart_height = svgHeight - margin.top - margin.bottom;

            var time_watch = [
            <% @time_watch.each do |time| %>
                <%= time %>,
            <% end %>
            ]; // vposによるブロック毎の動画開始位置

            var block_com_num = [
            <% @block_com_num.each do |com_num| %>
                <%= com_num %>,
            <% end %>
            ]; // ブロック毎のコメント数
	    
	    var movie_start_time = [
	    <% @start_time.each do |time| %>
	        "<%= time %>",
	    <% end %>
	    ]; // ブロック毎の動画開始位置

            var comment_max = Math.max.apply(null, block_com_num); // コメントの最大値
            var color = d3.scale.category10();  // あらかじめ用意されている色を使う

            var yScale = (function (height, num_max) {
                         if (height < num_max) {
                            magnification = height/num_max;
                         }
                         else {
                            magnification = 1;
                         }
                         return magnification;
                         }(chart_height - 10, comment_max)); // グラフの高さの倍率
	    var tooltip = d3.select("#tooltip")

            var svg = d3.select("#chart").append("svg")
                .attr("width", svgWidth)
                .attr("height", svgHeight)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            svg.selectAll("rect")   // 四角形を対象にする
                .data(block_com_num)  // データを読み込む
                .enter()
                .append("rect") // 四角形を生成する
                .attr("x", function(d, i){  // X座標を計算
                    return i * chart_width / <%= @m_division %> ;
                })
                .attr("y", function(d){ // Y座標を計算
                    return chart_height - d * yScale;
                })
                .attr("width", chart_width / <%= @m_division %>)  // 四角形の横幅
                .attr("height", function(d){    // 四角形の高さ
                    return d * yScale;
                })
                .attr("fill", function(d,i){    // 色を指定する
                    return color(i);    // 色を返す
                })
                .on("mouseover", function(d,i){ 
		d3.select(this).attr("fill","red");
		return tooltip.style("visibility", "visible").text("コメント数:\n" + d ).append("p").text( "再生位置:\n" + movie_start_time[i] ); //ポップアップを表示
		})
                .on("mousemove", function(d){
                 return tooltip.style("top", (d3.event.pageY-20)+"px").style("left",(d3.event.pageX+10)+"px"); //ポップアップが表示される位置の指定
		})
                .on("mouseout", function(d,i){
		d3.select(this).attr("fill",color(i));
		return tooltip.style("visibility", "hidden");//ポップアップを非表示
		})
                .on("click", function(d,i){
                    var player = document.getElementById('external_nico_0');
                    try {
                        player.ext_setPlayheadTime(time_watch[i]);
                    } catch (e) {
                        alert("再生ボタンを押してください。");
                    }
                    
                });
            var xAxis = d3.svg.axis()
                          .scale(d3.scale.linear().domain([0, time_watch[<%= @m_division %> - 1]]).range([0, chart_width]))
                          .orient("bottom")
                          .tickSize(6, -chart_height)
                          .tickFormat(function(d) { 
                            var value = "";
                            var second = d % 60;
                            var minute = (d - second) / 60;
                            if (minute > 0) {
                                value += minute + "分";
                            }
                            return value + second + "秒"; 
                          });
            var yAxis = d3.svg.axis()
                          .ticks(5)
                          .scale(d3.scale.linear().domain([0, comment_max]).range([chart_height, 0]))
                          .orient("left")
                          .tickSize(6, -chart_width);

            svg.append("g")
               .attr("class", "x axis")
               .attr("transform", "translate(0, " + chart_height + ")")
               .call(xAxis)
               .append("text")
               .attr("y", 35)
               .attr("x", 200)
               .style("text-anchor", "middle")
               .text("経過時間 / 分秒");

            svg.append("g")
               .attr("class", "y axis")
               .call(yAxis)
               .append("text")
               .style("text-anchor", "end")
               .text("盛り上がり")


            </script>
        </div>
    </div>
</div>


<% if Rails.env.development? %>
    <b>分割数 : </b>
    <%= @m_division %>
    <br>


    <b>閾値 : </b>
    <%= @threshold %>
    <br>

    <b>ブロックごとのコメント数 :</b>
    <% @block_com_num.each do |com_num| %>
    <%= com_num %>
    <% end %>

    <br>
    <b>ブロックごとの動画開始位置 :</b>
    <% @start_time.each do |time| %>
    <%= time %>
    <% end %>

    <br>
    <b>ハイライト該当箇所 :</b>
    <% @highlights_place.each do |start, finish| %>
    <%= start.to_s + '~' + finish.to_s %> ,
<% end %>
<% end %>
